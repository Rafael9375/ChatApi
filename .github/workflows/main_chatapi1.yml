# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build & Deploy - API (.NET) + Frontend (Vite)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read

    env:
      SOLUTION_FILE: ChatApi/ChatAPI.sln
      API_PROJECT: ChatApi/ChatAPI/ChatAPI.csproj
      TEST_PROJECT: ChatApi/ChatApiXUnitTest/ChatApiXUnitTest.csproj
      PUBLISH_DIR: ${{ github.workspace }}\publish
      FE_DIR: ChatAPI/chatportal

    steps:
      - uses: actions/checkout@v4

      # ===== .NET API =====
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore
        run: dotnet restore "${{ env.SOLUTION_FILE }}"

      - name: Build (Release)
        run: dotnet build "${{ env.SOLUTION_FILE }}" --no-restore -c Release

      - name: Test (xUnit)
        run: dotnet test "${{ env.TEST_PROJECT }}" --no-build -c Release `
          --logger "trx;LogFileName=tests.trx" `
          --results-directory "${{ github.workspace }}\TestResults"

      - name: Publish Web API
        run: dotnet publish "${{ env.API_PROJECT }}" -c Release -o "${{ env.PUBLISH_DIR }}"

      # Artifact da API
      - name: Upload API artifact
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{ env.PUBLISH_DIR }}

      - name: Listar arquivos do chatportal
        run: dir ChatAPI\chatportal

      # ===== Frontend (Vite) =====
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ChatAPI/chatportal/package-lock.json

      - name: Install deps (frontend)
        working-directory: ${{ env.FE_DIR }}
        run: npm ci

      - name: Build (frontend)
        working-directory: ${{ env.FE_DIR }}
        run: npm run build

      - name: Renomear dist para build (compatibilidade Azure)
        working-directory: ${{ env.FE_DIR }}
        run: |
          if (Test-Path build) { Remove-Item -Recurse -Force build }
          Rename-Item dist build

      # Artifact do Frontend
      - name: Upload Static Site artifact
        uses: actions/upload-artifact@v4
        with:
          name: static-app
          path: ${{ env.FE_DIR }}\build\*

  deploy-api:
    runs-on: windows-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download API artifact
        uses: actions/download-artifact@v4
        with:
          name: .net-app
          path: app

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_CA89C577336B4D60AD23734EC9D38334 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_241EEA86D9944EB3BF3CB34881793FF0 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_D6040EA2256545EEBB10D481FBF62FB0 }}

      - name: Deploy API to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'ChatApi1'
          slot-name: 'Production'
          package: app   # <- Corrigido (antes estava ".")

  deploy-static:
    runs-on: windows-latest
    needs: build
    steps:
      - name: Download Static Site artifact
        uses: actions/download-artifact@v4
        with:
          name: static-app
          path: swa   # conteudo do dist vai para 'swa'

      - name: Inspect downloaded artifact
        shell: cmd
        run: |
          dir swa
          if not exist swa\index.html (echo "index.html não encontrado em 'swa'." & exit /b 1)
          if exist swa\package.json (echo "ERRO: package.json NAO deve estar em 'swa' (isso força build)." & exit /b 1)

      - name: Deploy to Azure Static Web Apps (UPLOAD - sem build)
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "upload"
          app_location: "swa"   # <- raiz com index.html
          output_location: "."  # <- artefato FINAL está na raiz
          skip_app_build: true
          skip_api_build: true

